<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.posco.hanmadang.mapper.posco.EmployeeMapper">
	<select id="select" resultType="Employee" parameterType="hashmap">
		SELECT * FROM class_employee (nolock) WHERE idx_no = #{idx_no} 
	</select>
	
	<select id="selectNo" resultType="Employee" parameterType="hashmap">
		SELECT * FROM class_employee (nolock) WHERE em_no = #{em_no} 
	</select>
	
	<select id="listPaged" resultType="Employee" parameterType="hashmap">
		SELECT *
		FROM (
			SELECT idx_no, em_no, em_name, part_name, work_name, em_type, 
			ROW_NUMBER() OVER (ORDER BY regidate DESC) AS rownum
			FROM class_employee (nolock)
			<include refid="listPagedWhere"/>
		) AS NO
		<include refid="listPagedWhere1"/>
	</select>
	
	<select id="countPaged" resultType="int" parameterType="hashmap">
		SELECT count(*) FROM class_employee (nolock)
		<include refid="listPagedWhere"/>
	</select>
	
	<sql id="listPagedWhere">
		WHERE 1 = 1
		<if test="_parameter.containsKey('op') and op != null and op != '' and keyword != null and keyword != ''">
			<choose>
			<when test="op == 'all'">
			AND (em_name LIKE {fn CONCAT({fn CONCAT('%', #{keyword})}, '%')} OR em_no LIKE {fn CONCAT({fn CONCAT('%', #{keyword})}, '%')}) 
			</when>
			<when test="op == 'emno'">
			AND em_no LIKE {fn CONCAT({fn CONCAT('%', #{keyword})}, '%')}
			</when>
			<when test="op == 'name'">
			AND em_name LIKE {fn CONCAT({fn CONCAT('%', #{keyword})}, '%')}
			</when>
			</choose>
		</if>
	</sql>
	
	<sql id="listPagedWhere1">
		WHERE 1=1
		<if test="_parameter.containsKey('firstOffset')">
		AND NO.rownum BETWEEN #{firstOffset} AND #{lastOffset}
		</if>
	</sql>
	
	<update id="update" parameterType="Employee">
		UPDATE class_employee SET
			em_name = #{em_name} 
			,part_name = #{part_name} 
			,work_name = #{work_name} 
			,em_no = #{em_no}
		WHERE idx_no = #{idx_no}
	</update>
	
	<delete id="delete" parameterType="hashmap">
		DELETE FROM class_employee WHERE idx_no = #{idx_no}
	</delete>
	
	<delete id="truncate1" parameterType="hashmap">
		TRUNCATE Table class_employee
	</delete>
	
	<delete id="truncate" parameterType="hashmap">
		DELETE FROM class_employee
	</delete>
	
	<insert id="insert" parameterType="map">
		INSERT class_employee
		(em_name, part_name, work_name, em_no, em_type, regidate)
		VALUES
		<foreach collection="list" item="el" separator=",">
		 (#{el.em_name}, #{el.part_name}, #{el.work_name}, #{el.em_no}, 'Y', getdate())
		</foreach>
	</insert>
	
</mapper>